@model WFM.DAL.Order

@{
    ViewBag.Title = "Order";
    ViewBag.ButtonLink = "'/Order/Details'";
}

<style>

    @@media screen {
        #printSection {
            display: none;
        }
    }

    @@media (min-width: 992px) {
        .modal-dialog {
            max-width: 60%;
        }
    }

    @@media print {
        body * {
            visibility: hidden;
        }

        #printSection, #printSection * {
            visibility: visible;
        }

        #printSection {
            position: absolute;
            left: 10px;
            top: 0;
        }
    }

    table.report-container {
        page-break-after: always;
    }

    thead.report-header {
        display: table-header-group;
    }

    tfoot.report-footer {
        display: table-footer-group;
    }

    tr {
        page-break-inside: avoid;
        page-break-after: auto
    }
</style>

<div class="dashboard-ecommerce">
    <div class="container-fluid dashboard-content ">
        <!-- ============================================================== -->
        <!-- pageheader  -->
        <!-- ============================================================== -->
        @Html.Partial("_PageHeaderPartialWithButton")
        <!-- ============================================================== -->
        <!-- end pageheader  -->
        <!-- ============================================================== -->

        <div class="border border-primary bg-actual-white  m-b-10">

            <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-t-20">
                <div class="d-flex justify-content-around mb-4">
                    <div class="col-2">
                        <label for="typeFilter">Order Type:</label>
                        <select id="typeFilter" class="form-control">
                            <option value="">All</option>
                        </select>
                    </div>
                    <div class="col-2">
                        <label for="fromDate">From:</label>
                        <input type="date" id="fromDate" name="fromDate" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="toDate">To:</label>
                        <input type="date" id="toDate" name="toDate" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="statusFilter">Status:</label>
                        <select id="statusFilter" class="form-control">
                            <option value="">All</option>
                            <option value="Not Started">Not started</option>
                            <option value="In-Progress">In-Progress</option>
                            <option value="Ready To Invoice">Ready to invoice</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                    <div class="col-2">
                        <label for="clientFilter">Client:</label>
                        <input type="text" id="clientFilter" name="clientFilter" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="salesFilter">Sales person:</label>
                        <input type="text" id="salesFilter" name="salesFilter" class="form-control">
                    </div>
                </div>
                @*<div>
                    <div class="form-check form-check-inline pb-2">
                        <input class="btn btn-primary active" type="button" id="AllOrders" value="Reset Filters">
                    </div>
                </div>*@
                <div class="table-responsive">
                    <table id="List" class="table table-striped table-bordered first">
                        <thead>
                            <tr>
                                <th>PO No</th>
                                <th>Client</th>
                                <th>Location</th>
                                <th>Status</th>
                                <th>Created Date (MM/DD/YYYY)</th>
                                <th>Month</th>
                                <th>Channeled By</th>


                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="reportModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @* <h5 class="modal-title" id="exampleModalLabel">Medical Report</h5>*@
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="Preview">
                @*Html.Partial("_PrintOrder")*@
            </div>
            <div class="modal-footer">

                <button id="btnPrint" type="button" class="btn btn-primary">Print</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(function () {
        /*     fetchClientList()*/
        fetchOrderTypes()
        LoadOrders();
    });



    //const allOrdersButton = document.getElementById("AllOrders");


    //allOrdersButton.addEventListener("click", function () {
    //    LoadOrders();
    //});

     //Populate client dropdown using AJAX
    //function fetchClientList() {
    //    $.ajax({
    //        url: "/Client/GetList",
    //        type: "POST",
    //        dataType: "json",
    //        success: function (response) {
    //            $('#clientDropdown').empty().append('<option value="">All Clients</option>'); // Clear existing options and add a default option
    //            $.each(response, function (index, client) {
    //                console.log(client)
    //                //$('#clientDropdown').append($('<option>', {
    //                //    value: client.Id,
    //                //    text: client.Name
    //                //}));
    //            });
    //        },
    //        error: function (xhr, status, error) {
    //            console.error("Error fetching client list:", error);
    //        }
    //    });
    //}
    function fetchOrderTypes() {
        $.ajax({
            url: "/OrderType/GetList",
            type: "POST",
            dataType: "json",
            success: function (response) {
                // $('#clientDropdown').empty().append('<option value="">All Clients</option>'); // Clear existing options and add a default option
                response.data.forEach(function (item) {
                    $('#typeFilter').append($('<option>', {
                        value: item.Name,
                        text: item.Name
                    }));
                });
                //$.each(response, function (index, type) {
                //    console.log(type)
                    //$('#clientDropdown').append($('<option>', {
                    //    value: client.Id,
                    //    text: client.Name
                    //}));
                //});
            },
            error: function (xhr, status, error) {
                console.error("Error fetching client list:", error);
            }
        });
    }

    function LoadOrders() {

        if ($.fn.dataTable.isDataTable('#List')) {
            table = $('#List').DataTable();
            table.destroy();
        }
        let minDate, maxDate, statusFilter, clientFilter,SalesPersonFilter,TypeFilter;


        // Custom filtering function which will search data in column four between two values
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            let min = minDate ? minDate.getTime() : null;
            let max = maxDate ? maxDate.getTime() : null;
            let date = new Date(data[4]);
            let status = statusFilter ? statusFilter === data[3] : true;
            let client = clientFilter ? data[1].toLowerCase().includes(clientFilter.toLowerCase()) : true; // Filter client name (case insensitive)
            let salesperson = SalesPersonFilter ? data[6].toLowerCase().includes(SalesPersonFilter.toLowerCase()) : true; // Filter client name (case insensitive)
            let type = TypeFilter ? TypeFilter === data[0].split("-")[0] : true;

            if (
                ((min === null && max === null) ||
                    (min === null && date <= max) ||
                    (min <= date && max === null) ||
                    (min <= date && date <= max)) &&
                status &&
                client &&
                salesperson &&
                type
            ) {
                return true;
            }
            return false;
        });

        // Create date inputs
        $('#fromDate').change(function () {
            minDate = $(this).val() ? new Date($(this).val()) : null;
            table.draw();
        });

        $('#toDate').change(function () {
            maxDate = $(this).val() ? new Date($(this).val()) : null;
            table.draw();
        });

        // Status filter change event listener
        $('#statusFilter').change(function () {
            statusFilter = $(this).val();
            table.draw();
        });

        $('#typeFilter').change(function () {
            TypeFilter = $(this).val();
            table.draw();
        });

        // Client filter input event listener
        $('#clientFilter').keyup(function () {
            clientFilter = $(this).val();
            table.draw();
        });
        // Sales Person Filter input event listener
        $('#salesFilter').keyup(function () {
            SalesPersonFilter = $(this).val();
            table.draw();
        });

        table = $('#List').DataTable({
            "ordering": false,
            "createdRow": function (row, data, dataIndex) {

            },
            "ajax": {
                "url": "/Order/GetAll",
                "type": "POST",
                "datatype": "json"
            },
            "columns": [
                { "data": "Code", "width": "10%", "ordering": false, "sorting": false },
                { "data": "ClientName", "width": "20%", "ordering": false, "sorting": false },
                { "data": "Location", "width": "25%", "ordering": false, "sorting": false },
                { "data": "StatusName", "width": "10%", "ordering": false, "sorting": false },
                { "data": "CreatedDateString", "width": "15%", "ordering": false, "sorting": false },
                { "data": "Month", "width": "5%", "ordering": false, "sorting": false },
                { "data": "ChanneledBy", "width": "15%", "ordering": false, "sorting": false },
              
            ]
        });
       

    }


</script>


@section Scripts    {
    @Scripts.Render("~/bundles/jqueryval")
}
